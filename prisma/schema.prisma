generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// types of employees
enum Role {
  ADMIN
  TECH
  BCBA
}

// types of behavior data
enum BehaviorType {
  TRIAL // Single YES OR NO
  COUNT // Single count of how many things
  TRIAL_ARRAY // Array of yes or nos
  COUNT_ARRAY // Array of counts of how many trials
  MEASUREMENT // Static measurements: height, weight, etc.
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  firstName       String
  lastName        String
  phoneNumber     String?
  EmployeeProfile EmployeeProfile?
  StudentProfile  StudentProfile?
  archive         Boolean          @default(false)
}

model EmployeeProfile {
  id       Int              @id @default(autoincrement())
  role     Role             @default(TECH)
  userId   Int              @unique
  User     User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Students StudentProfile[]
  Sessions Session[]
}

model StudentProfile {
  id                 Int             @id @default(autoincrement())
  dob                DateTime
  userId             Int             @unique
  User               User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignedEmployeeId Int
  AssignedEmployee   EmployeeProfile @relation(fields: [assignedEmployeeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Behaviors          Behavior[]
  Sessions           Session[]
}

model Behavior {
  id              Int               @id @default(autoincrement())
  title           String //meant to be technical jargon which will be easy to query in a search bar for end-user
  desc            String
  createdAt       DateTime          @default(now())
  type            BehaviorType
  arrayCount      Int?
  studentId       Int
  Student         StudentProfile    @relation(fields: [studentId], references: [id])
  BehaviorData    BehaviorData[]
  behaviorTempId  Int?
  BehaviorTempRel BehaviorTemplate? @relation(fields: [behaviorTempId], references: [id])
  graduated       Boolean           @default(false)
  archive         Boolean           @default(false)
}

model BehaviorTemplate {
  id         Int          @id @default(autoincrement())
  title      String
  desc       String
  type       BehaviorType
  arrayCount Int?
  Behavior   Behavior[]
  archive    Boolean      @default(false)
}

model Session {
  id         Int             @id @default(autoincrement())
  Data       BehaviorData[]
  studentId  Int
  employeeId Int
  createdAt  DateTime        @default(now())
  note       String
  Student    StudentProfile  @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  Employee   EmployeeProfile @relation(fields: [employeeId], references: [id], onUpdate: Cascade) //what are we doing onDelete?
  submitted  Boolean         @default(false)
}

model BehaviorData {
  id         Int      @id @default(autoincrement())
  data       String // decode at load time based on Behaviour.dataType
  behaviorId Int
  Behavior   Behavior @relation(fields: [behaviorId], references: [id])
  sessionId  Int
  Session    Session  @relation(fields: [sessionId], references: [id])
}
